# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Employee {
  id: ID!
  firstName: String
  lastName: String
  email: String
  slug: String
  city: String
  state: String
  country: String
  dob: String
  phone: String
  photo: String
  status: String
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  teamsCount(where: TeamWhereInput! = {}): Int
  title: Title
}

input EmployeeWhereUniqueInput {
  id: ID
  email: String
  slug: String
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  slug: StringFilter
  city: StringFilter
  state: StringFilter
  country: StringFilter
  dob: StringFilter
  phone: StringFilter
  photo: StringFilter
  status: StringNullableFilter
  teams: TeamManyRelationFilter
  title: TitleWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input TeamManyRelationFilter {
  every: TeamWhereInput
  some: TeamWhereInput
  none: TeamWhereInput
}

input EmployeeOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  slug: OrderDirection
  city: OrderDirection
  state: OrderDirection
  country: OrderDirection
  dob: OrderDirection
  phone: OrderDirection
  photo: OrderDirection
  status: OrderDirection
}

input EmployeeUpdateInput {
  firstName: String
  lastName: String
  email: String
  slug: String
  city: String
  state: String
  country: String
  dob: String
  phone: String
  photo: String
  status: String
  teams: TeamRelateToManyForUpdateInput
  title: TitleRelateToOneForUpdateInput
}

input TeamRelateToManyForUpdateInput {
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

input TitleRelateToOneForUpdateInput {
  create: TitleCreateInput
  connect: TitleWhereUniqueInput
  disconnect: Boolean
}

input EmployeeUpdateArgs {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateInput!
}

input EmployeeCreateInput {
  firstName: String
  lastName: String
  email: String
  slug: String
  city: String
  state: String
  country: String
  dob: String
  phone: String
  photo: String
  status: String
  teams: TeamRelateToManyForCreateInput
  title: TitleRelateToOneForCreateInput
}

input TeamRelateToManyForCreateInput {
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

input TitleRelateToOneForCreateInput {
  create: TitleCreateInput
  connect: TitleWhereUniqueInput
}

type Team {
  id: ID!
  name: String
  employees(
    where: EmployeeWhereInput! = {}
    orderBy: [EmployeeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Employee!]
  employeesCount(where: EmployeeWhereInput! = {}): Int
}

input TeamWhereUniqueInput {
  id: ID
  name: String
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  name: StringFilter
  employees: EmployeeManyRelationFilter
}

input EmployeeManyRelationFilter {
  every: EmployeeWhereInput
  some: EmployeeWhereInput
  none: EmployeeWhereInput
}

input TeamOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TeamUpdateInput {
  name: String
  employees: EmployeeRelateToManyForUpdateInput
}

input EmployeeRelateToManyForUpdateInput {
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  create: [EmployeeCreateInput!]
  connect: [EmployeeWhereUniqueInput!]
}

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  name: String
  employees: EmployeeRelateToManyForCreateInput
}

input EmployeeRelateToManyForCreateInput {
  create: [EmployeeCreateInput!]
  connect: [EmployeeWhereUniqueInput!]
}

type Title {
  id: ID!
  name: String
  employees(
    where: EmployeeWhereInput! = {}
    orderBy: [EmployeeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Employee!]
  employeesCount(where: EmployeeWhereInput! = {}): Int
}

input TitleWhereUniqueInput {
  id: ID
  name: String
}

input TitleWhereInput {
  AND: [TitleWhereInput!]
  OR: [TitleWhereInput!]
  NOT: [TitleWhereInput!]
  id: IDFilter
  name: StringFilter
  employees: EmployeeManyRelationFilter
}

input TitleOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TitleUpdateInput {
  name: String
  employees: EmployeeRelateToManyForUpdateInput
}

input TitleUpdateArgs {
  where: TitleWhereUniqueInput!
  data: TitleUpdateInput!
}

input TitleCreateInput {
  name: String
  employees: EmployeeRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createEmployee(data: EmployeeCreateInput!): Employee
  createEmployees(data: [EmployeeCreateInput!]!): [Employee]
  updateEmployee(
    where: EmployeeWhereUniqueInput!
    data: EmployeeUpdateInput!
  ): Employee
  updateEmployees(data: [EmployeeUpdateArgs!]!): [Employee]
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteEmployees(where: [EmployeeWhereUniqueInput!]!): [Employee]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createTitle(data: TitleCreateInput!): Title
  createTitles(data: [TitleCreateInput!]!): [Title]
  updateTitle(where: TitleWhereUniqueInput!, data: TitleUpdateInput!): Title
  updateTitles(data: [TitleUpdateArgs!]!): [Title]
  deleteTitle(where: TitleWhereUniqueInput!): Title
  deleteTitles(where: [TitleWhereUniqueInput!]!): [Title]
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  employees(
    where: EmployeeWhereInput! = {}
    orderBy: [EmployeeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Employee!]
  employee(where: EmployeeWhereUniqueInput!): Employee
  employeesCount(where: EmployeeWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  titles(
    where: TitleWhereInput! = {}
    orderBy: [TitleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Title!]
  title(where: TitleWhereUniqueInput!): Title
  titlesCount(where: TitleWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
